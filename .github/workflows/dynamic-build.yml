name: B&P Dynamic Docker Images
on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/dynamic-build.yml"
      - "deployment/images/**"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/dynamic-build.yml"
      - "deployment/images/**"

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for comparing changes

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: deployment/images/**

      - name: Display all changed files
        run: |
          echo "üîç Changed files in this push/PR:"
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "  ‚Üí $file"
          done

      - name: Set up build matrix
        id: set-matrix
        run: |
          cd deployment/images
          echo "üìÅ Scanning directory: $(pwd)"

          # Initialize matrix
          MATRIX="["
          SEPARATOR=""

          # Find and display all Dockerfiles
          echo "üê≥ Found Dockerfiles:"
          find . -type f -name "Dockerfile.*" | while read -r dockerfile; do
            echo "  ‚Üí $dockerfile"
          done

          # Process each Dockerfile
          for dockerfile in $(find . -type f -name "Dockerfile.*"); do
            # Remove leading ./ if present
            dockerfile_clean=$(echo "$dockerfile" | sed 's|^./||')
            image_name=$(echo "$dockerfile_clean" | sed 's/.*Dockerfile\.//')
            context_dir=$(dirname "$dockerfile_clean")
            if [ "$context_dir" = "." ]; then
              context_path="deployment/images"
            else
              context_path="deployment/images/$context_dir"
            fi
            
            echo "‚ö° Processing $dockerfile_clean"
            echo "  ‚Ä¢ Image name: $image_name"
            echo "  ‚Ä¢ Context directory: $context_dir"
            echo "  ‚Ä¢ Full context path: $context_path"
            
            # Check for changes
            CHANGED=false
            echo "  ‚Ä¢ Checking for changes in context..."
            
            # First, check if the Dockerfile itself changed
            if [[ "${{ steps.changed-files.outputs.all_changed_files }}" == *"deployment/images/$dockerfile_clean"* ]]; then
              CHANGED=true
              echo "    ‚úì Dockerfile changed"
            fi
            
            # Then check context directory
            if [ ! "$CHANGED" = true ] && [ "$context_dir" != "." ]; then
              for changed_file in ${{ steps.changed-files.outputs.all_changed_files }}; do
                if [[ $changed_file == $context_path/* ]]; then
                  CHANGED=true
                  echo "    ‚úì Found change in context: $changed_file"
                  break
                fi
              done
            fi
            
            # If changed, add to matrix
            if [ "$CHANGED" = true ]; then
              echo "  ‚úÖ Changes detected - adding to build matrix"
              MATRIX="${MATRIX}${SEPARATOR}{\"image\": \"${image_name}\", \"dockerfile\": \"${dockerfile_clean}\", \"context\": \"${context_dir}\"}"
              SEPARATOR=","
            else
              echo "  ‚è≠Ô∏è No changes detected - skipping"
            fi
          done

          MATRIX="${MATRIX}]"

          echo "üìä Final build matrix:"
          echo "$MATRIX" | jq '.'

          if [ "$MATRIX" = "[]" ]; then
            echo "‚ö†Ô∏è No changes detected in any Docker contexts - skipping builds"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "üöÄ Changes detected - proceeding with builds"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          fi

  build_and_push:
    needs: detect_changes
    if: ${{ needs.detect_changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect_changes.outputs.matrix) }}
    steps:
      - name: Free disk space
        run: |
          # Show initial space
          df -h
          # Remove unnecessary tools and packages
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          # Clean Docker cache
          docker rmi $(docker image ls -aq) || true
          docker system prune -af --volumes || true
          # Show available space after cleanup
          df -h

      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define lowercase repository owner
        id: repo
        run: |
          echo "Converting ${{ github.repository_owner }} to lowercase..."
          echo "REPO_OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Display build information
        run: |
          echo "üèóÔ∏è Building image: ${{ matrix.image }}"
          echo "  ‚Ä¢ Dockerfile: ${{ matrix.dockerfile }}"
          echo "  ‚Ä¢ Context: ${{ matrix.context }}"
          echo "  ‚Ä¢ Full image name: ghcr.io/${{ env.REPO_OWNER_LC }}/${{ matrix.image }}:latest"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: "./deployment/images/${{ matrix.context }}"
          file: "./deployment/images/${{ matrix.dockerfile }}"
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LC }}/${{ matrix.image }}:latest

      - name: Build status
        run: |
          echo "‚úÖ Successfully built and pushed: ghcr.io/${{ env.REPO_OWNER_LC }}/${{ matrix.image }}:latest"
